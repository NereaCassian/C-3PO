name: Build Extension

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      issues: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run build
      
    - name: Check build output
      run: |
        echo "üìÅ Checking build output..."
        if [ -d "dist" ]; then
          echo "‚úÖ dist directory exists"
          ls -la dist/
        else
          echo "‚ùå dist directory not found"
          exit 1
        fi
        
        if [ -d "public" ]; then
          echo "‚úÖ public directory exists"
          ls -la public/
        else
          echo "‚ùå public directory not found"
          exit 1
        fi
        
        if [ -f "public/manifest.json" ]; then
          echo "‚úÖ manifest.json found in public"
        elif [ -f "manifest.json" ]; then
          echo "‚úÖ manifest.json found in root"
        else
          echo "‚ùå manifest.json not found"
          exit 1
        fi
        
        # Check for required extension files
        echo "üîç Checking for required extension files..."
        required_files=("manifest.json" "popup.html" "popup.js")
        for file in "${required_files[@]}"; do
          if [ -f "dist/$file" ] || [ -f "public/$file" ]; then
            echo "‚úÖ $file found"
          else
            echo "‚ö†Ô∏è  $file not found in dist or public"
          fi
        done
      
    - name: Verify build output
      run: |
        echo "üìã Verifying build output in dist directory..."
        ls -la dist/
        
        # Ensure manifest.json exists
        if [ ! -f "dist/manifest.json" ]; then
          echo "‚ùå Error: manifest.json not found in dist directory"
          exit 1
        fi
        
        echo "‚úÖ Build verification complete - ready for upload"
        
    - name: Upload extension as artifact
      id: upload-extension
      uses: actions/upload-artifact@v4
      with:
        name: C-3PO-extension-v${{ github.run_number }}
        path: dist/
        retention-days: 30
        compression-level: 6  # Default compression for directory
        if-no-files-found: error
        overwrite: false
        
    - name: Verify extension upload
      run: |
        echo "‚úÖ Extension uploaded successfully!"
        echo "üì¶ Artifact ID: ${{ steps.upload-extension.outputs.artifact-id }}"
        echo "üîó Download URL: ${{ steps.upload-extension.outputs.artifact-url }}"
        echo "üîí SHA-256: ${{ steps.upload-extension.outputs.artifact-digest }}"
        
    - name: Generate AI Changelog
      if: github.ref == 'refs/heads/main'
      id: changelog
      uses: janheinrichmerker/action-github-changelog-generator@v2.3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        output: CHANGELOG.md
        futureRelease: v${{ github.run_number }}
        issues: true
        pullRequests: true
        issuesWoLabels: true
        prWoLabels: true
        author: true
        compareLink: true
        breakingLabels: "breaking,breaking-change"
        enhancementLabels: "enhancement,feature,feat"
        bugLabels: "bug,fix,hotfix"
        securityLabels: "security,vulnerability"
        deprecatedLabels: "deprecated"
        removedLabels: "removed"
        unreleased: true
        unreleasedLabel: "Unreleased"
        headerLabel: "ü§ñ AI-Generated Changelog"
        configureSections: |
          {
            "sections": {
              "Breaking": {
                "prefix": "üí•",
                "labels": ["breaking", "breaking-change"]
              },
              "Security": {
                "prefix": "üîí",
                "labels": ["security", "vulnerability"]
              },
              "Enhancements": {
                "prefix": "‚ú®",
                "labels": ["enhancement", "feature", "feat"]
              },
              "Bug Fixes": {
                "prefix": "üêõ",
                "labels": ["bug", "fix", "hotfix"]
              },
              "Documentation": {
                "prefix": "üìö",
                "labels": ["documentation", "docs"]
              },
              "Style": {
                "prefix": "üé®",
                "labels": ["style", "ui", "design"]
              },
              "Refactoring": {
                "prefix": "‚ôªÔ∏è",
                "labels": ["refactor"]
              },
              "Performance": {
                "prefix": "‚ö°",
                "labels": ["performance", "perf"]
              },
              "Tests": {
                "prefix": "üß™",
                "labels": ["test", "testing"]
              },
              "CI/CD": {
                "prefix": "üë∑",
                "labels": ["ci", "cd", "workflow"]
              },
              "Build": {
                "prefix": "üì¶",
                "labels": ["build", "dependencies"]
              }
            }
          }
        
    - name: Create Git Tag
      id: create_tag
      if: github.ref == 'refs/heads/main'
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Extract version numbers
        if [[ $LATEST_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
        else
          MAJOR=0
          MINOR=0
          PATCH=0
        fi
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
        echo "New version: $NEW_VERSION"
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create and push tag
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
        git push origin "$NEW_VERSION"
        
        echo "‚úÖ Tag $NEW_VERSION created and pushed"
        
        # Set output for next step
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Download extension for release
      if: github.ref == 'refs/heads/main'
      uses: actions/download-artifact@v4
      with:
        name: C-3PO-extension-v${{ github.run_number }}
        path: extension-files
        
    - name: Create release ZIP
      if: github.ref == 'refs/heads/main'
      run: |
        cd extension-files
        zip -r ../C-3PO-extension.zip .
        cd ..
        echo "‚úÖ Release ZIP created"
        ls -la C-3PO-extension.zip
        
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        files: C-3PO-extension.zip
        tag_name: ${{ steps.create_tag.outputs.new_version }}
        name: Release ${{ steps.create_tag.outputs.new_version }}
        body: |
          ## C-3PO ${{ steps.create_tag.outputs.new_version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### üéâ Features
          - AI-powered translation using Google Gemini or OpenAI
          - Context menu integration for instant translations
          - Dark mode support for better user experience
          - Custom translation options and language pairs
          - Secure API key storage with encryption
          
          ### üöÄ Installation
          1. Download the `C-3PO-extension.zip` file from the Assets section above
          2. Extract it to a folder on your computer
          3. Open Chrome and go to `chrome://extensions/`
          4. Enable "Developer mode" in the top right
          5. Click "Load unpacked" and select the extracted folder
          
          ### ‚öôÔ∏è Configuration
          - Open the extension and go to "AI Provider Settings"
          - Choose your preferred AI provider (Gemini or OpenAI)
          - Enter your API key
          - Customize context menu options as needed
          - Save the configuration
          
          ### üîó Quick Links
          - [GitHub Repository](https://github.com/NereaCassian/C-3PO)
          - [Issues](https://github.com/NereaCassian/C-3PO/issues)
          - [Documentation](https://github.com/NereaCassian/C-3PO#readme)
          
          ---
          
          **May the translations be with you!** üåç‚ú®
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
